# -*- coding: utf-8 -*-
"""DS_&_ML_TASK_NO_2_MANISH_KUMAR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tYkEwx9Kkl1LOpB1T4GNW5fq1E00tfIJ
"""

# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Load the dataset
df = pd.read_csv('100_Sales.csv')  # Change the filename according to the file you have
df.head()

# Check for missing values
print("\nMissing Values Before Handling:\n", df.isnull().sum())

# Drop columns with all missing values
df.dropna(axis=1, how='all', inplace=True)

# Handle missing values for numerical columns, let's fill with the mean value
df['Unit_Cost'].fillna(df['Unit_Cost'].mean(), inplace=True)
df['Total_Profit'].fillna(df['Total_Profit'].mean(), inplace=True)

# After handling missing values, verify again
print("\nMissing Values After Handling:\n", df.isnull().sum())

# Drop 'Unnamed' columns if they exist
df = df.loc[:, ~df.columns.str.contains('^Unnamed')]

# Display the dataset again after dropping unwanted columns
df.head()

# One-hot encode categorical columns
df_encoded = pd.get_dummies(df, drop_first=True)

# Display the encoded dataset
df_encoded.head()

# Define target variable (update the column name based on your dataset)
y = df_encoded['Total_Revenue']  # Target variable: Change as required
X = df_encoded.drop(columns=['Total_Revenue'])  # Features: Drop target column

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Verify the split
print("X_train shape:", X_train.shape)
print("y_train shape:", y_train.shape)
print("X_test shape:", X_test.shape)
print("y_test shape:", y_test.shape)

# Initialize the Decision Tree Regressor model
dt_model = DecisionTreeRegressor(random_state=42)

# Train the model
dt_model.fit(X_train, y_train)

# Make predictions
y_pred_dt = dt_model.predict(X_test)

# Evaluate the model
print("Decision Tree - Mean Absolute Error:", mean_absolute_error(y_test, y_pred_dt))
print("Decision Tree - Mean Squared Error:", mean_squared_error(y_test, y_pred_dt))
print("Decision Tree - R2 Score:", r2_score(y_test, y_pred_dt))

# Initialize the Random Forest Regressor model
rf_model = RandomForestRegressor(random_state=42)

# Train the model
rf_model.fit(X_train, y_train)

# Make predictions
y_pred_rf = rf_model.predict(X_test)

# Evaluate the model
print("Random Forest - Mean Absolute Error:", mean_absolute_error(y_test, y_pred_rf))
print("Random Forest - Mean Squared Error:", mean_squared_error(y_test, y_pred_rf))
print("Random Forest - R2 Score:", r2_score(y_test, y_pred_rf))

# Compare models based on R2 Score or other metrics
print(f"Decision Tree R2 Score: {r2_score(y_test, y_pred_dt)}")
print(f"Random Forest R2 Score: {r2_score(y_test, y_pred_rf)}")

